코드의 흐름을,,,, 느껴라!!

★[목표]
1. 사용자가 form을 채워넣으면 myDB에 추가된다.
2. 사용자가 form을 채워넣으면 추가된 후 확인할 수 있다.
3. 입력 폼에 맞지 않게 입력할 경우 알림창을 띄워준다.


★[사용한 파일]
- PersonSevlet
- listSevlet
- PersonDAO
- PersonValidator
- PersonService -> 이건 만들었는데 안썼다. 왜지감자?
- TestDao
- TestValidator


★[흐름]

0. 먼저 입력/목록보기를 할 수 있는 첫페이지를 만들어둔다.
	- index.html이 제일 첫 화면으로, 여기서 추가나 목록보기 기능을 고를 수 있다.
	- 이건 좀... 알아서 하자...
	- 추가하기를 누르면 form.jsp로 간다.

1. PersonDAO와 Person의 게터세터등이 있는 파일을 만든다.
♨▶ PersonDAO는 DB에서 정보를 가져오는 기능을한다?????

	- DAO는 전에 만드는 것 처럼 똑같이 만들어주면 된다! 모르면 안됨~ㅋㅎㅋㅎㅋㅎ
	사실 기억안난다... 복습해!
	- DAO는 DB에 INSERT하는 기능과 select All하기 위해 사용한다.
	- ♨ 선생님이 미리 interface로 만들어두면 편하겠쭁?? 라고 하셨는데
	무슨 말인지 모르겠따ㅎㅎ

2. DAO를 만들려면 UTIL파일이 필요하다.
	(1) util 파일 넣는건 전에 쓰던 DBUtil을 package를 mysql.properties와 같이
	통채로 복사해서 java 파일들을 모아둔 src 폴더에 넣어준다.
	(2) mysql-connector을 WEB-INF의 lib에다가 넣어준다.
	- 과정이 전에 DB연결하던거랑 비슷하다.

3. DAO가 제대로 되는지 테스트해준다.
	- 테스트는 java project를 새로 만든 다음,
	DAO가 있는 웹프로젝트 파일을 임포트 시켜서 테스트를 해준다.
	웹프로젝트 파일에다가 테스트를 안하는 이유는... ♨설명을 들었지만 잘 모르겠는데
	웹프로젝트에는 쓸모없는 파일을 만드는게 별로 좋지않기 때문이다.

4. PersonServlet을 만든다.
♨▶ PersonServlet은 가져온 정보를 뿌려주는 역할을 한다???
personServlet은 사용자가 폼을 이용해 myDB에다가 추가해달라는 요청을 했을 때
요청에 맞는 페이지로 이동시켜주며 그 페이지에다가 가져온 정보를 뿌려주는 역할을 한다??

	- PersonServlet은 HttpServlet을 오버라이드한다.
	헤드만 만든 후 우클릭해서 source의 service를 체크하면 자동으로 양식을 만들어준다.
	- Servlet은 객체를 이용해서 MyDB의 정보를 가져온다.
	- ♨정보를 가져오는건 HttpServlet의 요청(HttpServletRequest)과 응답(HttpServletResponse)객체이다.
	- 위가 확실한가요?


5. PersonServlet을 만들면 web.xml파일을 수정해줘야한다.
♨▶ web.xml은 주소를 가지고 있지 않은 servlet을 위해 주소를 만들어주고, 넘어온 정보도 함께 받는 곳이다.
<url-pattern>속에 주소를 임의로 만들어주면 form에서 action 주소를 임의의 주소를 만든 쪽으로 간다.

	- 추가하는 내용은 다음과 같다. 형식은 항상 비슷한 듯 하다.
	<servlet>
		<servlet-name>PersonServlet</servlet-name>
		<servlet-class>hello.PersonServlet</servlet-class>
	</servlet>

	<servlet-mapping>
		<servlet-name>PersonServlet</servlet-name>
		<url-pattern>/addperson.do</url-pattern>
	</servlet-mapping>

6. listServlet을 만든다.
♨▶ listServlet은 우리가 DAO에서 myDB의 정보를 가져온 다음 list로 저장해둔 목록을
보여주면서, 볼 수 있는 페이지로 이동하는 역할을 한다???
	
	- ListServlet도 마찬가지로 HttpServlet을 오버라이드하는데,
	얘는 왜 예외를 던지지 않지 ??? 그냥 보여주기용이라서 예외를 던질일이 없어서 그런거같다.
	- 마찬가지로 정보를 가져오는건 HttpServlet의 요청(HttpServletRequest)과 응답(HttpServletResponse)객체이다.  

7. listServlet을 만들었으니 역시 web.xml파일을 수정해준다.
	<servlet>
		<servlet-name>ListServlet</servlet-name>
		<servlet-class>hello.ListServlet</servlet-class>
	</servlet>

	<servlet-mapping>
		<servlet-name>ListServlet</servlet-name>
		<url-pattern>/list</url-pattern>
	</servlet-mapping>

8. 이까지하면 일단 목표 1이 잘 실행된다! 목표 2도 되긴 되는데... 예쁘게 포맷이 안되어있다.
예쁘게 넣기위해서 ul과 li에 나눠서 담아줘야한다.

9. 예쁘게 목록을 보여주기 위해서 form.jsp 파일을 만진다.
	- 이 파일을 만지는 이유는 실제적으로 목록을 보여주게 하는데 jsp 파일을 사용하기 때문이다.
	- html은 정말 형태랑 링크만 잡아준다.
	- form.jsp 파일에 el을 써서 정보를 뿌려줄건데, 단계를 거쳐야한다.
	
	(1)  WEB-INF의 lib에 jstl어쩌고.jar를 넣어준다.
		- 아마 버전에 맞게 넣어줘야하는 듯?
		-♨ 얘가 무슨 역할을 하는지는 모르겠다.

	(2) form.jsp에다가 (1)에서 넣어준 jar를 임포트해준다.
		- <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
		- Ctrl + space 하면 자동으로 해준다.
	(3) el로 정보들을 표시한다.
		- 자세한 내용은... 0810-03-chamgo에 form.jsp를 참고하도록 하자...


	------------ 여기까지 하면 일단 목표 1,2는 했다! ------------


    ------------------ 목표 3은 또 단계가 많으니 새로 하자! ----------------------


★[목표3을 위한 목표]

1. 사용자가 입력 폼에 잘못 입력할 수 있는 경우의 수들을 생각해서
각 상황에 필요한 조건들을 생각해본다.
(예)  이름을 총 몇자로 할것인가, 나이의 기준점이 있는가 등등 세부적인 것들

2. validator이라는 java파일로 경우의 수를 알려줄 수 있는 메소드들의 모음 클래스를 만든다.

3. 만든 파일을 다시 sevlet과 연동시킨다.

4. 잘 출력되는지 확인한다.


★[흐름은 사실 목표3을 위한 목표와 같다...]

그래도 정리를 다시 해보자면,

1. validator를 만든다.
	- 만드는 곳은 DAO가 있는 곳이다.
	어디 만들어도 상관없겠지만... java 클래스 파일이니까 클래스 파일이 있는 곳에 만들어준다.

2.  만든 validator는 servlet에서 사용해준다.
	- 원래 PersonServlet에서는 굉장히 간단하게 트라이 캐치만으로 표현되어있는 곳이 있는데
	거기서 모든 경우의 수를 다 담아서 에러 메시지를 표현해 줄 수 있는 validator을 대신 넣어준다.
	
	- 원래 있던 친구는 just insert만 하기 때문에 잘못된 형식으로 넣어도
	사용자는 에러만 받지 뭐가 잘못됐는지 알 수 없다.
	그걸 알려줘야함!

	- ... 넣는 방법은 솔직히 아직 느낌적으로만 알겠다... 복붙해야할듯 ㅎㅎ 머쓱!



+@♨
redirect와 dispatcher.forward의 차이? :
el이 먼데 그래서 : 
servlet이 먼데 그래서!!! :