0817

annotation?
init?


기존에 사용했던 커넥션 객체는 1회용이다.
많은 연결을 한번에 하고 필요할때마다 꺼내서 하고 하기 위해서(많은 사용자들? 대용량?)
connection pool을 사용한다.

connection 객체를 하나 만들어서 꺼냈다가 집어넣었다가 하면 되는데,
직접 할 필요 없이 미리 만들어진 것들이 있다.
우리는 jar파일을 lib에 넣어서 미리 만들어진 pool을 사용한다.

메이븐 레퍼지토리 -> 자바 라이브러리 집합소
에서 미리 만들어진 pool을 다운받아서 사용했다.
그 중에서도 아파치에서 만든걸 사용했다.

사용법을 외우는게 아니라,
어떻게 사용하는지 아이디어를 잘 알아야한다.
무슨말인지 알거같으면서 모르겠다...


<!-- 
   Session의 유효 범위는?
   - 클라이언트가 계속 접근하면 시간이 갱신, 새로운 클라이언트인지 확인하고 마지막 접속 시간 기준 30분 뒤에 삭제
   jsessionid?
   - 서블릿 컨테이너(tomcat)에 접속한 사용자를 구분하기 위해 부여한 값

   HttpSession 객체에 접근하기 위한 방법은?
   - request객체에 getSession
   기존 Session이 '더 이상 유효하지 않음'을 위해 호출해야하는 HttpSession 메소드는?
   - invalidate
   쿠키(Cookie)와 세션(Session)을 관리하는 주체는?
   - 브라우저 / 서버
   ---
   
   매핑되어 있는 주소에 HttpServlet의 요청 제어 전/후로  필터링 작업을 할 수 있는 객체는?
   - filter
   doFilter 메소드는 어떤 기능?
   - 원래의 흐름으로 흘러가도록 흐름을 이어주는 메소드
   필터를 활용하면 좋은 점?
   인코딩, 기록 남아있는지 등을 반복해야하는 행동을 하나의 클래스에 저장해두고 여러 군데에서 사용 가능
   ---
   
   Connection Pool이 뭔가요?
--> pool 은 하나의 통으로서 사용할때 꺼내 사용, 사용하지 않을때 반납
   - 사용 ex) dpcp2



SLF4J로 다룰 수 있는 로거들을 여러개 다룰 수 있다.

로그는 우리가 원하는 곳에 남길 수 있다.
다양한 곳에 기록을 남길 수 있도록 설정만 하면 된다.

MVC
- 모델 뷰 컨트롤러
사용자 인터페이스, 데이터 및 논리 제어를 구현하는데 널리 사용되는 소프트웨어 디자인 패턴
디자인 패턴은 좀 더 쉽고 편리하게 사용할 수 있도록 만든 특정한 방법을 말한다.

Model 우리가 제공하고자 하는 주제 ->(예) 로그인
View -> 로그인 폼과 결과 페이지
Controller -> 데이터와 사용자인터페이스 요소를 잇는 다리역할로
이벤트들을 처리하는 부분을 뜻한다. 

사용자가 컨트롤러를 조작하면 컨트롤러는 모델을 통해 데이터를 가지고 오고
그 정보를 바탕으로 시각적 표현을 담당하는 뷰를 제어해 사용자에게 전달한다.


